##/Users/nitesh.meshram/Documents/v2Apps/POCV2/V2SwiftApplication/V2SwiftApplication.xcodeproj
#language: objective-c
#xcode_workspace: V2SwiftApplication.xcodeproj # path to your xcodeproj folder
##xcode_scheme: V2SwiftApplication

# .travis.yml
# XcodeTravis
#
# Created by V2Solutions on 16/03/15.
# Copyright (c) 2014 ___v2Tech Ventures___. All rights reserved.

#Travis CI and V2 GPTI standard configuration file
#Do not change any configuration except env/global: variable content
#Alignment of text is important in travis so do not reformat the file and indentation of the content.
#Do not use TAB in the file.
#Validated the .travis.yml with _* **http://www.yamllint.com/* (http://lint.travis-ci.org/)

#Defines the language to be used by travis for compilation
language: objective-c


#osx_image: xcode7.3  # we're telling travis to use xcode 7.3

notifications:
email:
recipients:
- nitesh.meshram@v2solutions.com
on_success: always
on_failure: always


# List of scripts to be executed before execution of "before_script"
before_install:
- chmod a+x scripts/config.sh
- chmod a+x scripts/TestShellScript.sh
- chmod a+x scripts/add-key.sh
- chmod a+x scripts/remove-key.sh
- chmod a+x scripts/update-bundle.sh
- chmod a+x scripts/sign-and-upload.sh

# List of scripts to be executed before execution of script
before_script:
- ". ./scripts/config.sh"
- ". ./scripts/add-key.sh"
- ". ./scripts/update-bundle.sh"

#Command to be executed in "script".
script:



#Condition which defines the Build env used in the xctool based on the branch
#For Branch : develop --> DEV scheme used
#For Branch : QA --> QA scheme used
#For Branch : master --> UAT scheme used
#No Travis CI support for DEBUG and PROD scheme.

#- if [ "$TRAVIS_BRANCH" = "QA" ]; then
#APP_BUILD_ENV=QA;
#echo "QA Scheme Selected.";
#elif [ "$TRAVIS_BRANCH" = "master" ]; then
#APP_BUILD_ENV=UAT;
#echo "UAT Scheme Selected.";
#fi

#command to build the .app for specific scheme
- xctool -workspace "$APP_WORKSPACE_PATH" -scheme "$APP_SCHEME" -sdk iphoneos -configuration Release OBJROOT="$PWD/build" SYMROOT="$PWD/build" ONLY_ACTIVE_ARCH=NO

#- xctool -workspace "$APP_WORKSPACE_PATH" -scheme "$APP_SCHEME.$APP_BUILD_ENV" -sdk iphoneos -configuration "$APP_BUILD_ENV" OBJROOT="$PWD/build" SYMROOT="$PWD/build" ONLY_ACTIVE_ARCH=NO

#- xctool -workspace "$APP_WORKSPACE_PATH" -scheme "$APP_SCHEME" -sdk iphoneos -configuration "$APP_BUILD_ENV" OBJROOT="$PWD/build" SYMROOT="$PWD/build" ONLY_ACTIVE_ARCH=NO

#- /usr/bin/xcodebuild -workspace $APP_WORKSPACE_PATH -scheme $APP_SCHEME

#command to run unit test for specific scheme
#- xctool test -workspace "$APP_WORKSPACE_PATH" -scheme "$APP_SCHEME.$APP_BUILD_ENV" -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO
#- xctool test -workspace "$APP_WORKSPACE_PATH" -scheme "$APP_SCHEME" -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO

#Scripts to be executed after execution of "script"
after_script:
#Remove key generated by add-key.sh
- "./scripts/remove-key.sh"

#executed after successful execution of "script"
after_success:
#Sign the build using certs and upload to Hockey App
#based on specified tokens and ids when all the command are executed successfuly
#This sign will upload the .ipa to Hockey App

#- "./scripts/sign-and-upload.sh"

#executed after failed execution of "script"
after_failure:
#Sign the build using certs and upload to Hockey App
#based on specified tokens and ids when the unit tests failed to execute
#Logic:
#This script will sign the .app if generated successfully by "script"
# else the step will be ignored.
#If the .ipa file is generated successfully by sign step
#than upload script will upload to Hockey app.

#- "./scripts/sign-and-upload.sh"





